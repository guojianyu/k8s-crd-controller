/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "lkcontroller/pkg/apis/lkcontroller/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LkControllerLister helps list LkControllers.
type LkControllerLister interface {
	// List lists all LkControllers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LkController, err error)
	// LkControllers returns an object that can list and get LkControllers.
	LkControllers(namespace string) LkControllerNamespaceLister
	LkControllerListerExpansion
}

// lkControllerLister implements the LkControllerLister interface.
type lkControllerLister struct {
	indexer cache.Indexer
}

// NewLkControllerLister returns a new LkControllerLister.
func NewLkControllerLister(indexer cache.Indexer) LkControllerLister {
	return &lkControllerLister{indexer: indexer}
}

// List lists all LkControllers in the indexer.
func (s *lkControllerLister) List(selector labels.Selector) (ret []*v1alpha1.LkController, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LkController))
	})
	return ret, err
}

// LkControllers returns an object that can list and get LkControllers.
func (s *lkControllerLister) LkControllers(namespace string) LkControllerNamespaceLister {
	return lkControllerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LkControllerNamespaceLister helps list and get LkControllers.
type LkControllerNamespaceLister interface {
	// List lists all LkControllers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LkController, err error)
	// Get retrieves the LkController from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LkController, error)
	LkControllerNamespaceListerExpansion
}

// lkControllerNamespaceLister implements the LkControllerNamespaceLister
// interface.
type lkControllerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LkControllers in the indexer for a given namespace.
func (s lkControllerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LkController, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LkController))
	})
	return ret, err
}

// Get retrieves the LkController from the indexer for a given namespace and name.
func (s lkControllerNamespaceLister) Get(name string) (*v1alpha1.LkController, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lkcontroller"), name)
	}
	return obj.(*v1alpha1.LkController), nil
}
